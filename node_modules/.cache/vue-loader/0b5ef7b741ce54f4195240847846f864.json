{"remainingRequest":"/home/runner/work/U3_Big_data_analitica_datos/U3_Big_data_analitica_datos/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Big_data_analitica_datos/U3_Big_data_analitica_datos/src/views/curso/Tema3.vue?vue&type=template&id=2dc9bd52&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Big_data_analitica_datos/U3_Big_data_analitica_datos/src/views/curso/Tema3.vue","mtime":1736996186596},{"path":"/home/runner/work/U3_Big_data_analitica_datos/U3_Big_data_analitica_datos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Big_data_analitica_datos/U3_Big_data_analitica_datos/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Big_data_analitica_datos/U3_Big_data_analitica_datos/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Big_data_analitica_datos/U3_Big_data_analitica_datos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Big_data_analitica_datos/U3_Big_data_analitica_datos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}